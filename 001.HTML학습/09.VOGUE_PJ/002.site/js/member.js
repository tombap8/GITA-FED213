// 보그 PJ 회원가입 JS - member.js ///

$(() => { /////////// jQB ////////////////////////////

    console.log("회원가입 로딩완료!");

    /// 모든 공백제거 처리함수 ///////
    let groSpace = cv => cv.replace(/\s/g, "");
    // groSpace는 get rid of Space  즉, 공백제거라는 말!
    // let groSpace = (cv) => {return cv.replace(/\s/g,"");}
    // replace(바꿀값,바꿀값)
    // 바꿀값 -> /\s/ -> 슬래쉬사이에 쓰면 정규식
    // 역슬래쉬s -> \s 는 '공백문자' (space)
    // g -> global 즉, 모두찾아라!

    // 함수표현(화살표함수)
    // (전달변수) => {return 값}
    // 전달변수가 하나이면 소괄호와 리턴값 처리만 있으면 뒤의 중괄호
    // 도 생략이 가능하다!
    // 전달변수 => 처리값; 

    /********************************************************** 
        입력요소에서 포커스가 빠질때 발생하는 이벤트는?
        ->>>> blur(블러!!!) : focus의 반대
        대상: input[type=text][id!=email2][class!=search],
              input[type=password]
        대상조건: type이 text인 input요소 중 
                아이디가 email2가 아니고 클래스가 search가 
                아닌 요소 + type이 password인 input요소
        _______________________________________________

        요소[속성][속성] -> 한요소에 여러속성조건 선택가능
        참고) != 속성 선택자는 제이쿼리전용이다!(CSS사용불가)

    **********************************************************/
    $(`input[type=text][id!=email2][class!=search],
   input[type=password]`)
        .blur(function () {

            // 방금 블러발생한 요소의 id는?
            let cid = $(this).attr("id");
            // cid 는 current id 즉, 현재 아이디
            // attr(속성명) -> 해당속성값을 읽어옴!

            // 블러발생요소의 입력값은?
            let cv = $(this).val();
            // cv는 current value 즉, 현재값
            // val() -> 선택요소의 입력값을 읽어옴!
            // trim() -> 문자열 앞뒤공백 제거(공백만쓰면 모든공백제거)

            // '이름'인 경우 앞뒤공백만 제거(중간공백허용)
            if (cid === "mnm") cv = cv.trim();
            // 기타인 경우 모든공백처리!
            else cv = groSpace(cv);
            // 변수에 함수를 담으면 그 함수의 리턴값이 담긴다!


            console.log("블러!", cid, "\n값:", cv);

            // 공백제거된 데이터를 다시 화면에 출력하기!!!
            $(this).val(cv);

            /**************************************** 
                    1. 빈값 여부 체크하기
            ****************************************/
            if (cv === "") {
                // 메시지 출력
                $(this).siblings(".msg").text("필수입력!")
                .removeClass("on");
                // .msg 박스는 형제요소임(바로 다음에 있지 않는 것도 있음)
                // siblings(요소) 다른형제요소 중 특정요소 선택 메서드사용!
                // siblings() 아무값도 안쓰면 다른 형제요소 모두선택함

            } /////////// if : 빈값체크 ////////////

            /***************************************************** 
                 2. 아이디일 경우 유효성 검사하기
                 - 검사기준: 영문자로 시작하는 6~20글자 영문자/숫자
            *****************************************************/
            else if (cid === "mid") {
                // console.log("검사결과:",vReg(cv,cid));

                // 검사결과가 불통과이면 ///////////////////
                if(!vReg(cv,cid)){ // !(NOT) 반대로 들어감
                    $(this).siblings(".msg")
                    .text("영문자로 시작하는 6~20글자 영문자/숫자")
                    .removeClass("on");
                    // 글자색 빨간색 복원(on이 들어갔을 수 있음)
                } ///////// if : 아이디검사 불통과 ////////

                // 검사결과가 통과이면 ////////////////////
                else {
                    // 원래 아이디 중복여부 검사를 해야함!
                    $(this).siblings(".msg")
                    .text("훌륭한 아이디네요~!")
                    .addClass("on");
                    // 글자색 변경 클래스추가!(녹색글자)

                } ///////// else : 아이디검사 통과 ////////

            } /////////// else if : 아이디일 경우 ////////////////// 

            /***************************************************** 
                 3. 비밀번호일 경우 유효성 검사하기
                 - 검사기준: 특수문자,문자,숫자포함 형태의 5~15자리
            *****************************************************/
           else if(cid === "mpw"){
                // console.log("검사결과:",vReg(cv,cid));

                // 검사 결과 불통이면 ///////////////////
                if(!vReg(cv,cid)){
                    $(this).siblings(".msg")
                    .text("특수문자,문자,숫자포함 형태의 5~15자리");
                } ///////// if : 비번검사 불통과 /////////
                // 검사결과 통과시 ///////////////////////
                else {
                    // 메시지 지우기
                    $(this).siblings(".msg").empty();
                } //////// else : 비번검사 통과 //////////

           } //////////////// if : 비밀번호일 경우 /////////////////

            else {
                // 메시지 지우기
                $(this).siblings(".msg").empty();
                // empty() - 내용지우기
            } /////////// else : 통과시 ////////////


        }); /////////////// blur ////////////////////////
    /////////////////////////////////////////////////

}); ///////////////// jQB //////////////////////////
////////////////////////////////////////////////////



/*////////////////////////////////////////////////////////
    함수명: vReg (validation with Regular Expression)
    기능: 값에 맞는 형식을 검사하여 리턴함
    (주의: 정규식을 따옴표로 싸지말아라!-싸면문자가됨!)
*/ ////////////////////////////////////////////////////////
function vReg(val, cid) {
    // val - 검사할값, cid - 처리구분아이디
    // //console.log("검사:"+val+"/"+cid);

    // 정규식 변수
    let reg;

    // 검사할 아이디에 따라 정규식을 변경함
    switch (cid) {
        case "mid": // 아이디
            reg = /^[a-z]{1}[a-z0-9]{5,19}$/g;
            // 영문자로 시작하는 6~20글자 영문자/숫자
            // /^[a-z]{1} 첫글자는 영문자로 체크!
            // [a-z0-9]{5,19} 첫글자 다음 문자는 영문 또는 숫자로
            // 최소 5글자에서 최대 19글자를 유효범위로 체크!
            // 첫글자 한글자를 더하면 최소 6글자에서 최대 20글자체크!
            break;
        case "mpw": // 비밀번호
            reg = /^.*(?=^.{5,15}$)(?=.*\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=]).*$/;
            // 특수문자,문자,숫자포함 형태의 5~15자리
            // (?=^.{5,15}$) 시작부터 끝까지 전체 5~15자릿수 체크!
            // (?=.*\d) 숫자 사용체크!
            // (?=.*[a-zA-Z]) 영문자 대문자 또는 소문자 사용체크!
            // (?=.*[!@#$%^&+=]) 특수문자 사용체크!
            break;
        case "eml": // 이메일
            reg = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/;
            // 이메일 형식에 맞는지 검사하는 정규식
            break;
    } //////////// switch case문 //////////////////

    // //console.log("정규식:"+reg);

    // 정규식 검사를 위한 JS메서드 
    // -> 정규식.test(검사할값) : 결과 true/false
    return reg.test(val); //호출한 곳으로 검사결과리턴!

} //////////// vReg 함수 //////////////////////////////////
///////////////////////////////////////////////////////////